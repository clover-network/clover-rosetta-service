openapi: 3.0.2
info:
  description: Build Once. Integrate Your Blockchain Everywhere.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Rosetta
  version: 1.4.1
servers:
- url: /
paths:
  /network/list:
    post:
      description: This endpoint returns a list of NetworkIdentifiers that the Rosetta
        server supports.
      operationId: networkList
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MetadataRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NetworkListResponse'
          description: Expected response to a valid request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: unexpected error
      summary: Get List of Available Networks
      tags:
      - Network
      x-eov-operation-handler: controllers/NetworkController
  /network/status:
    post:
      description: This endpoint returns the current status of the network requested.
        Any NetworkIdentifier returned by /network/list should be accessible here.
      operationId: networkStatus
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NetworkRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NetworkStatusResponse'
          description: Expected response to a valid request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: unexpected error
      summary: Get Network Status
      tags:
      - Network
      x-eov-operation-handler: controllers/NetworkController
  /network/options:
    post:
      description: This endpoint returns the version information and allowed network-specific
        types for a NetworkIdentifier. Any NetworkIdentifier returned by /network/list
        should be accessible here. Because options are retrievable in the context
        of a NetworkIdentifier, it is possible to define unique options for each network.
      operationId: networkOptions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NetworkRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NetworkOptionsResponse'
          description: Expected response to a valid request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: unexpected error
      summary: Get Network Options
      tags:
      - Network
      x-eov-operation-handler: controllers/NetworkController
  /block:
    post:
      description: 'Get a block by its Block Identifier. If transactions are returned
        in the same call to the node as fetching the block, the response should include
        these transactions in the Block object. If not, an array of Transaction Identifiers
        should be returned so /block/transaction fetches can be done to get all transaction
        information. When requesting a block by the hash component of the BlockIdentifier,
        this request MUST be idempotent: repeated invocations for the same hash-identified
        block must return the exact same block contents. No such restriction is imposed
        when requesting a block by height, given that a chain reorg event might cause
        the specific block at height `n` to be set to a different one.'
      operationId: block
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlockRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockResponse'
          description: Expected response to a valid request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: unexpected error
      summary: Get a Block
      tags:
      - Block
      x-eov-operation-handler: controllers/BlockController
  /block/transaction:
    post:
      description: 'Get a transaction in a block by its Transaction Identifier. This
        endpoint should only be used when querying a node for a block does not return
        all transactions contained within it. All transactions returned by this endpoint
        must be appended to any transactions returned by the /block method by consumers
        of this data. Fetching a transaction by hash is considered an Explorer Method
        (which is classified under the Future Work section). Calling this endpoint
        requires reference to a BlockIdentifier because transaction parsing can change
        depending on which block contains the transaction. For example, in Bitcoin
        it is necessary to know which block contains a transaction to determine the
        destination of fee payments. Without specifying a block identifier, the node
        would have to infer which block to use (which could change during a re-org).
        Implementations that require fetching previous transactions to populate the
        response (ex: Previous UTXOs in Bitcoin) may find it useful to run a cache
        within the Rosetta server in the /data directory (on a path that does not
        conflict with the node).'
      operationId: blockTransaction
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlockTransactionRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockTransactionResponse'
          description: Expected response to a valid request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: unexpected error
      summary: Get a Block Transaction
      tags:
      - Block
      x-eov-operation-handler: controllers/BlockController
  /mempool:
    post:
      description: Get all Transaction Identifiers in the mempool
      operationId: mempool
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NetworkRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MempoolResponse'
          description: Expected response to a valid request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: unexpected error
      summary: Get All Mempool Transactions
      tags:
      - Mempool
      x-eov-operation-handler: controllers/MempoolController
  /mempool/transaction:
    post:
      description: 'Get a transaction in the mempool by its Transaction Identifier.
        This is a separate request than fetching a block transaction (/block/transaction)
        because some blockchain nodes need to know that a transaction query is for
        something in the mempool instead of a transaction in a block. Transactions
        may not be fully parsable until they are in a block (ex: may not be possible
        to determine the fee to pay before a transaction is executed). On this endpoint,
        it is ok that returned transactions are only estimates of what may actually
        be included in a block.'
      operationId: mempoolTransaction
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MempoolTransactionRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MempoolTransactionResponse'
          description: Expected response to a valid request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: unexpected error
      summary: Get a Mempool Transaction
      tags:
      - Mempool
      x-eov-operation-handler: controllers/MempoolController
  /account/balance:
    post:
      description: Get an array of all AccountBalances for an AccountIdentifier and
        the BlockIdentifier at which the balance lookup was performed. The BlockIdentifier
        must always be returned because some consumers of account balance data need
        to know specifically at which block the balance was calculated to compare
        balances they compute from operations with the balance returned by the node.
        It is important to note that making a balance request for an account without
        populating the SubAccountIdentifier should not result in the balance of all
        possible SubAccountIdentifiers being returned. Rather, it should result in
        the balance pertaining to no SubAccountIdentifiers being returned (sometimes
        called the liquid balance). To get all balances associated with an account,
        it may be necessary to perform multiple balance requests with unique AccountIdentifiers.
        It is also possible to perform a historical balance lookup (if the server
        supports it) by passing in an optional BlockIdentifier.
      operationId: accountBalance
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountBalanceRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountBalanceResponse'
          description: Expected response to a valid request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: unexpected error
      summary: Get an Account Balance
      tags:
      - Account
      x-eov-operation-handler: controllers/AccountController
  /construction/derive:
    post:
      description: Derive returns the network-specific address associated with a public
        key. Blockchains that require an on-chain action to create an account should
        not implement this method.
      operationId: constructionDerive
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConstructionDeriveRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConstructionDeriveResponse'
          description: Expected response to a valid request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: unexpected error
      summary: Derive an Address from a PublicKey
      tags:
      - Construction
      x-eov-operation-handler: controllers/ConstructionController
  /construction/preprocess:
    post:
      description: Preprocess is called prior to `/construction/payloads` to construct
        a request for any metadata that is needed for transaction construction given
        (i.e. account nonce). The request returned from this method will be used by
        the caller (in a different execution environment) to call the `/construction/metadata`
        endpoint.
      operationId: constructionPreprocess
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConstructionPreprocessRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConstructionPreprocessResponse'
          description: Expected response to a valid request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: unexpected error
      summary: Create a Request to Fetch Metadata
      tags:
      - Construction
      x-eov-operation-handler: controllers/ConstructionController
  /construction/metadata:
    post:
      description: Get any information required to construct a transaction for a specific
        network. Metadata returned here could be a recent hash to use, an account
        sequence number, or even arbitrary chain state. The request used when calling
        this endpoint is often created by calling `/construction/preprocess` in an
        offline environment. It is important to clarify that this endpoint should
        not pre-construct any transactions for the client (this should happen in `/construction/payloads`).
        This endpoint is left purposely unstructured because of the wide scope of
        metadata that could be required.
      operationId: constructionMetadata
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConstructionMetadataRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConstructionMetadataResponse'
          description: Expected response to a valid request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: unexpected error
      summary: Get Metadata for Transaction Construction
      tags:
      - Construction
      x-eov-operation-handler: controllers/ConstructionController
  /construction/payloads:
    post:
      description: Payloads is called with an array of operations and the response
        from `/construction/metadata`. It returns an unsigned transaction blob and
        a collection of payloads that must be signed by particular addresses using
        a certain SignatureType. The array of operations provided in transaction construction
        often times can not specify all "effects" of a transaction (consider invoked
        transactions in Ethereum). However, they can deterministically specify the
        "intent" of the transaction, which is sufficient for construction. For this
        reason, parsing the corresponding transaction in the Data API (when it lands
        on chain) will contain a superset of whatever operations were provided during
        construction.
      operationId: constructionPayloads
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConstructionPayloadsRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConstructionPayloadsResponse'
          description: Expected response to a valid request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: unexpected error
      summary: Generate an Unsigned Transaction and Signing Payloads
      tags:
      - Construction
      x-eov-operation-handler: controllers/ConstructionController
  /construction/combine:
    post:
      description: Combine creates a network-specific transaction from an unsigned
        transaction and an array of provided signatures. The signed transaction returned
        from this method will be sent to the `/construction/submit` endpoint by the
        caller.
      operationId: constructionCombine
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConstructionCombineRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConstructionCombineResponse'
          description: Expected response to a valid request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: unexpected error
      summary: Create Network Transaction from Signatures
      tags:
      - Construction
      x-eov-operation-handler: controllers/ConstructionController
  /construction/parse:
    post:
      description: 'Parse is called on both unsigned and signed transactions to understand
        the intent of the formulated transaction. This is run as a sanity check before
        signing (after `/construction/payloads`) and before broadcast (after `/construction/combine`). '
      operationId: constructionParse
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConstructionParseRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConstructionParseResponse'
          description: Expected response to a valid request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: unexpected error
      summary: Parse a Transaction
      tags:
      - Construction
      x-eov-operation-handler: controllers/ConstructionController
  /construction/hash:
    post:
      description: TransactionHash returns the network-specific transaction hash for
        a signed transaction.
      operationId: constructionHash
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConstructionHashRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionIdentifierResponse'
          description: Expected response to a valid request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: unexpected error
      summary: Get the Hash of a Signed Transaction
      tags:
      - Construction
      x-eov-operation-handler: controllers/ConstructionController
  /construction/submit:
    post:
      description: Submit a pre-signed transaction to the node. This call should not
        block on the transaction being included in a block. Rather, it should return
        immediately with an indication of whether or not the transaction was included
        in the mempool. The transaction submission response should only return a 200
        status if the submitted transaction could be included in the mempool. Otherwise,
        it should return an error.
      operationId: constructionSubmit
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConstructionSubmitRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionIdentifierResponse'
          description: Expected response to a valid request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: unexpected error
      summary: Submit a Signed Transaction
      tags:
      - Construction
      x-eov-operation-handler: controllers/ConstructionController
components:
  schemas:
    NetworkIdentifier:
      description: The network_identifier specifies which network a particular object
        is associated with.
      example:
        blockchain: bitcoin
        sub_network_identifier:
          metadata:
            producer: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5
          network: shard 1
        network: mainnet
      properties:
        blockchain:
          example: bitcoin
          type: string
        network:
          description: If a blockchain has a specific chain-id or network identifier,
            it should go in this field. It is up to the client to determine which
            network-specific identifier is mainnet or testnet.
          example: mainnet
          type: string
        sub_network_identifier:
          $ref: '#/components/schemas/SubNetworkIdentifier'
      required:
      - blockchain
      - network
      type: object
    SubNetworkIdentifier:
      description: In blockchains with sharded state, the SubNetworkIdentifier is
        required to query some object on a specific shard. This identifier is optional
        for all non-sharded blockchains.
      example:
        metadata:
          producer: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5
        network: shard 1
      properties:
        network:
          example: shard 1
          type: string
        metadata:
          example:
            producer: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5
          type: object
      required:
      - network
      type: object
    BlockIdentifier:
      description: The block_identifier uniquely identifies a block in a particular
        network.
      example:
        index: 1123941
        hash: 0x1f2cc6c5027d2f201a5453ad1119574d2aed23a392654742ac3c78783c071f85
      properties:
        index:
          description: This is also known as the block height.
          example: 1123941
          format: int64
          type: integer
        hash:
          example: 0x1f2cc6c5027d2f201a5453ad1119574d2aed23a392654742ac3c78783c071f85
          type: string
      required:
      - hash
      - index
      type: object
    PartialBlockIdentifier:
      description: When fetching data by BlockIdentifier, it may be possible to only
        specify the index or hash. If neither property is specified, it is assumed
        that the client is making a request at the current block.
      example:
        index: 1123941
        hash: 0x1f2cc6c5027d2f201a5453ad1119574d2aed23a392654742ac3c78783c071f85
      properties:
        index:
          example: 1123941
          format: int64
          type: integer
        hash:
          example: 0x1f2cc6c5027d2f201a5453ad1119574d2aed23a392654742ac3c78783c071f85
          type: string
      type: object
    TransactionIdentifier:
      description: The transaction_identifier uniquely identifies a transaction in
        a particular network and block or in the mempool.
      example:
        hash: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f
      properties:
        hash:
          description: 'Any transactions that are attributable only to a block (ex:
            a block event) should use the hash of the block as the identifier.'
          example: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f
          type: string
      required:
      - hash
      type: object
    OperationIdentifier:
      description: The operation_identifier uniquely identifies an operation within
        a transaction.
      example:
        index: 1
        network_index: 0
      properties:
        index:
          description: The operation index is used to ensure each operation has a
            unique identifier within a transaction. This index is only relative to
            the transaction and NOT GLOBAL. The operations in each transaction should
            start from index 0. To clarify, there may not be any notion of an operation
            index in the blockchain being described.
          example: 1
          format: int64
          minimum: 0
          type: integer
        network_index:
          description: Some blockchains specify an operation index that is essential
            for client use. For example, Bitcoin uses a network_index to identify
            which UTXO was used in a transaction. network_index should not be populated
            if there is no notion of an operation index in a blockchain (typically
            most account-based blockchains).
          example: 0
          format: int64
          minimum: 0
          type: integer
      required:
      - index
      type: object
    AccountIdentifier:
      description: The account_identifier uniquely identifies an account within a
        network. All fields in the account_identifier are utilized to determine this
        uniqueness (including the metadata field, if populated).
      example:
        metadata: '{}'
        address: 0x3a065000ab4183c6bf581dc1e55a605455fc6d61
        sub_account:
          metadata: '{}'
          address: 0x6b175474e89094c44da98b954eedeac495271d0f
      properties:
        address:
          description: The address may be a cryptographic public key (or some encoding
            of it) or a provided username.
          example: 0x3a065000ab4183c6bf581dc1e55a605455fc6d61
          type: string
        sub_account:
          $ref: '#/components/schemas/SubAccountIdentifier'
        metadata:
          description: Blockchains that utilize a username model (where the address
            is not a derivative of a cryptographic public key) should specify the
            public key(s) owned by the address in metadata.
          type: object
      required:
      - address
      type: object
    SubAccountIdentifier:
      description: An account may have state specific to a contract address (ERC-20
        token) and/or a stake (delegated balance). The sub_account_identifier should
        specify which state (if applicable) an account instantiation refers to.
      example:
        metadata: '{}'
        address: 0x6b175474e89094c44da98b954eedeac495271d0f
      properties:
        address:
          description: 'The SubAccount address may be a cryptographic value or some
            other identifier (ex: bonded) that uniquely specifies a SubAccount.'
          example: 0x6b175474e89094c44da98b954eedeac495271d0f
          type: string
        metadata:
          description: If the SubAccount address is not sufficient to uniquely specify
            a SubAccount, any other identifying information can be stored here. It
            is important to note that two SubAccounts with identical addresses but
            differing metadata will not be considered equal by clients.
          type: object
      required:
      - address
      type: object
    Block:
      description: 'Blocks contain an array of Transactions that occurred at a particular
        BlockIdentifier. A hard requirement for blocks returned by Rosetta implementations
        is that they MUST be _inalterable_: once a client has requested and received
        a block identified by a specific BlockIndentifier, all future calls for that
        same BlockIdentifier must return the same block contents.'
      example:
        metadata:
          transactions_root: 0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347
          difficulty: "123891724987128947"
        parent_block_identifier:
          index: 1123941
          hash: 0x1f2cc6c5027d2f201a5453ad1119574d2aed23a392654742ac3c78783c071f85
        transactions:
        - metadata:
            size: 12378
            lockTime: 1582272577
          operations:
          - amount:
              metadata: '{}'
              currency:
                symbol: BTC
                metadata:
                  Issuer: Satoshi
                decimals: 8
              value: "1238089899992"
            metadata:
              asm: 304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd01
                03301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
              hex: 48304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd012103301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
            related_operations:
            - index: 0
              operation_identifier:
                index: 0
            type: Transfer
            coin_change:
              coin_identifier:
                identifier: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f:1
            account:
              metadata: '{}'
              address: 0x3a065000ab4183c6bf581dc1e55a605455fc6d61
              sub_account:
                metadata: '{}'
                address: 0x6b175474e89094c44da98b954eedeac495271d0f
            operation_identifier:
              index: 1
              network_index: 0
            status: Reverted
          - amount:
              metadata: '{}'
              currency:
                symbol: BTC
                metadata:
                  Issuer: Satoshi
                decimals: 8
              value: "1238089899992"
            metadata:
              asm: 304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd01
                03301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
              hex: 48304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd012103301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
            related_operations:
            - index: 0
              operation_identifier:
                index: 0
            type: Transfer
            coin_change:
              coin_identifier:
                identifier: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f:1
            account:
              metadata: '{}'
              address: 0x3a065000ab4183c6bf581dc1e55a605455fc6d61
              sub_account:
                metadata: '{}'
                address: 0x6b175474e89094c44da98b954eedeac495271d0f
            operation_identifier:
              index: 1
              network_index: 0
            status: Reverted
          transaction_identifier:
            hash: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f
        - metadata:
            size: 12378
            lockTime: 1582272577
          operations:
          - amount:
              metadata: '{}'
              currency:
                symbol: BTC
                metadata:
                  Issuer: Satoshi
                decimals: 8
              value: "1238089899992"
            metadata:
              asm: 304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd01
                03301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
              hex: 48304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd012103301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
            related_operations:
            - index: 0
              operation_identifier:
                index: 0
            type: Transfer
            coin_change:
              coin_identifier:
                identifier: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f:1
            account:
              metadata: '{}'
              address: 0x3a065000ab4183c6bf581dc1e55a605455fc6d61
              sub_account:
                metadata: '{}'
                address: 0x6b175474e89094c44da98b954eedeac495271d0f
            operation_identifier:
              index: 1
              network_index: 0
            status: Reverted
          - amount:
              metadata: '{}'
              currency:
                symbol: BTC
                metadata:
                  Issuer: Satoshi
                decimals: 8
              value: "1238089899992"
            metadata:
              asm: 304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd01
                03301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
              hex: 48304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd012103301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
            related_operations:
            - index: 0
              operation_identifier:
                index: 0
            type: Transfer
            coin_change:
              coin_identifier:
                identifier: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f:1
            account:
              metadata: '{}'
              address: 0x3a065000ab4183c6bf581dc1e55a605455fc6d61
              sub_account:
                metadata: '{}'
                address: 0x6b175474e89094c44da98b954eedeac495271d0f
            operation_identifier:
              index: 1
              network_index: 0
            status: Reverted
          transaction_identifier:
            hash: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f
        block_identifier:
          index: 1123941
          hash: 0x1f2cc6c5027d2f201a5453ad1119574d2aed23a392654742ac3c78783c071f85
        timestamp: 1582833600000
      properties:
        block_identifier:
          $ref: '#/components/schemas/BlockIdentifier'
        parent_block_identifier:
          $ref: '#/components/schemas/BlockIdentifier'
        timestamp:
          $ref: '#/components/schemas/Timestamp'
        transactions:
          items:
            $ref: '#/components/schemas/Transaction'
          type: array
        metadata:
          example:
            transactions_root: 0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347
            difficulty: "123891724987128947"
          type: object
      required:
      - block_identifier
      - parent_block_identifier
      - timestamp
      - transactions
      type: object
    Transaction:
      description: Transactions contain an array of Operations that are attributable
        to the same TransactionIdentifier.
      example:
        metadata:
          size: 12378
          lockTime: 1582272577
        operations:
        - amount:
            metadata: '{}'
            currency:
              symbol: BTC
              metadata:
                Issuer: Satoshi
              decimals: 8
            value: "1238089899992"
          metadata:
            asm: 304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd01
              03301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
            hex: 48304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd012103301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
          related_operations:
          - index: 0
            operation_identifier:
              index: 0
          type: Transfer
          coin_change:
            coin_identifier:
              identifier: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f:1
          account:
            metadata: '{}'
            address: 0x3a065000ab4183c6bf581dc1e55a605455fc6d61
            sub_account:
              metadata: '{}'
              address: 0x6b175474e89094c44da98b954eedeac495271d0f
          operation_identifier:
            index: 1
            network_index: 0
          status: Reverted
        - amount:
            metadata: '{}'
            currency:
              symbol: BTC
              metadata:
                Issuer: Satoshi
              decimals: 8
            value: "1238089899992"
          metadata:
            asm: 304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd01
              03301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
            hex: 48304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd012103301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
          related_operations:
          - index: 0
            operation_identifier:
              index: 0
          type: Transfer
          coin_change:
            coin_identifier:
              identifier: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f:1
          account:
            metadata: '{}'
            address: 0x3a065000ab4183c6bf581dc1e55a605455fc6d61
            sub_account:
              metadata: '{}'
              address: 0x6b175474e89094c44da98b954eedeac495271d0f
          operation_identifier:
            index: 1
            network_index: 0
          status: Reverted
        transaction_identifier:
          hash: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f
      properties:
        transaction_identifier:
          $ref: '#/components/schemas/TransactionIdentifier'
        operations:
          items:
            $ref: '#/components/schemas/Operation'
          type: array
        metadata:
          description: Transactions that are related to other transactions (like a
            cross-shard transaction) should include the tranaction_identifier of these
            transactions in the metadata.
          example:
            size: 12378
            lockTime: 1582272577
          type: object
      required:
      - operations
      - transaction_identifier
      type: object
    Operation:
      description: Operations contain all balance-changing information within a transaction.
        They are always one-sided (only affect 1 AccountIdentifier) and can succeed
        or fail independently from a Transaction.
      example:
        amount:
          metadata: '{}'
          currency:
            symbol: BTC
            metadata:
              Issuer: Satoshi
            decimals: 8
          value: "1238089899992"
        metadata:
          asm: 304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd01
            03301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
          hex: 48304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd012103301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
        related_operations:
        - index: 0
          operation_identifier:
            index: 0
        type: Transfer
        coin_change:
          coin_identifier:
            identifier: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f:1
        account:
          metadata: '{}'
          address: 0x3a065000ab4183c6bf581dc1e55a605455fc6d61
          sub_account:
            metadata: '{}'
            address: 0x6b175474e89094c44da98b954eedeac495271d0f
        operation_identifier:
          index: 1
          network_index: 0
        status: Reverted
      properties:
        operation_identifier:
          $ref: '#/components/schemas/OperationIdentifier'
        related_operations:
          description: Restrict referenced related_operations to identifier indexes
            < the current operation_identifier.index. This ensures there exists a
            clear DAG-structure of relations. Since operations are one-sided, one
            could imagine relating operations in a single transfer or linking operations
            in a call tree.
          example:
          - index: 0
            operation_identifier:
              index: 0
          items:
            $ref: '#/components/schemas/OperationIdentifier'
          type: array
        type:
          description: The network-specific type of the operation. Ensure that any
            type that can be returned here is also specified in the NetworkStatus.
            This can be very useful to downstream consumers that parse all block data.
          example: Transfer
          type: string
        status:
          description: The network-specific status of the operation. Status is not
            defined on the transaction object because blockchains with smart contracts
            may have transactions that partially apply. Blockchains with atomic transactions
            (all operations succeed or all operations fail) will have the same status
            for each operation.
          example: Reverted
          type: string
        account:
          $ref: '#/components/schemas/AccountIdentifier'
        amount:
          $ref: '#/components/schemas/Amount'
        coin_change:
          $ref: '#/components/schemas/CoinChange'
        metadata:
          example:
            asm: 304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd01
              03301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
            hex: 48304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd012103301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
          type: object
      required:
      - operation_identifier
      - status
      - type
      type: object
    Amount:
      description: Amount is some Value of a Currency. It is considered invalid to
        specify a Value without a Currency.
      example:
        metadata: '{}'
        currency:
          symbol: BTC
          metadata:
            Issuer: Satoshi
          decimals: 8
        value: "1238089899992"
      properties:
        value:
          description: Value of the transaction in atomic units represented as an
            arbitrary-sized signed integer. For example, 1 BTC would be represented
            by a value of 100000000.
          example: "1238089899992"
          type: string
        currency:
          $ref: '#/components/schemas/Currency'
        metadata:
          type: object
      required:
      - currency
      - value
      type: object
    Currency:
      description: Currency is composed of a canonical Symbol and Decimals. This Decimals
        value is used to convert an Amount.Value from atomic units (Satoshis) to standard
        units (Bitcoins).
      example:
        symbol: BTC
        metadata:
          Issuer: Satoshi
        decimals: 8
      properties:
        symbol:
          description: Canonical symbol associated with a currency.
          example: BTC
          type: string
        decimals:
          description: Number of decimal places in the standard unit representation
            of the amount. For example, BTC has 8 decimals. Note that it is not possible
            to represent the value of some currency in atomic units that is not base
            10.
          example: 8
          format: int32
          minimum: 0
          type: integer
        metadata:
          description: Any additional information related to the currency itself.
            For example, it would be useful to populate this object with the contract
            address of an ERC-20 token.
          example:
            Issuer: Satoshi
          type: object
      required:
      - decimals
      - symbol
      type: object
    SyncStatus:
      description: SyncStatus is used to provide additional context about an implementation's
        sync status. It is often used to indicate that an implementation is healthy
        when it cannot be queried  until some sync phase occurs. If an implementation
        is immediately queryable, this model is often not populated.
      example:
        target_index: 150
        stage: header sync
        current_index: 100
      properties:
        current_index:
          description: CurrentIndex is the index of the last synced block in the current
            stage.
          example: 100
          format: int64
          type: integer
        target_index:
          description: TargetIndex is the index of the block that the implementation
            is attempting to sync to in the current stage.
          example: 150
          format: int64
          type: integer
        stage:
          description: Stage is the phase of the sync process.
          example: header sync
          type: string
      required:
      - current_index
      type: object
    Peer:
      description: A Peer is a representation of a node's peer.
      example:
        metadata: '{}'
        peer_id: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5
      properties:
        peer_id:
          example: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5
          type: string
        metadata:
          type: object
      required:
      - peer_id
      type: object
    Version:
      description: The Version object is utilized to inform the client of the versions
        of different components of the Rosetta implementation.
      example:
        metadata: '{}'
        rosetta_version: 1.2.5
        node_version: 1.0.2
        middleware_version: 0.2.7
      properties:
        rosetta_version:
          description: The rosetta_version is the version of the Rosetta interface
            the implementation adheres to. This can be useful for clients looking
            to reliably parse responses.
          example: 1.2.5
          type: string
        node_version:
          description: The node_version is the canonical version of the node runtime.
            This can help clients manage deployments.
          example: 1.0.2
          type: string
        middleware_version:
          description: When a middleware server is used to adhere to the Rosetta interface,
            it should return its version here. This can help clients manage deployments.
          example: 0.2.7
          type: string
        metadata:
          description: Any other information that may be useful about versioning of
            dependent services should be returned here.
          type: object
      required:
      - node_version
      - rosetta_version
      type: object
    Allow:
      description: Allow specifies supported Operation status, Operation types, and
        all possible error statuses. This Allow object is used by clients to validate
        the correctness of a Rosetta Server implementation. It is expected that these
        clients will error if they receive some response that contains any of the
        above information that is not specified here.
      example:
        operation_types:
        - TRANSFER
        - TRANSFER
        historical_balance_lookup: true
        operation_statuses:
        - status: SUCCESS
          successful: true
        - status: SUCCESS
          successful: true
        errors:
        - retriable: true
          code: 12
          details:
            address: 0x1dcc4de8dec75d7aab85b567b6
            error: not base64
          message: Invalid account format
        - retriable: true
          code: 12
          details:
            address: 0x1dcc4de8dec75d7aab85b567b6
            error: not base64
          message: Invalid account format
      properties:
        operation_statuses:
          description: All Operation.Status this implementation supports. Any status
            that is returned during parsing that is not listed here will cause client
            validation to error.
          items:
            $ref: '#/components/schemas/OperationStatus'
          type: array
        operation_types:
          description: All Operation.Type this implementation supports. Any type that
            is returned during parsing that is not listed here will cause client validation
            to error.
          items:
            example: TRANSFER
            type: string
          type: array
        errors:
          description: All Errors that this implementation could return. Any error
            that is returned during parsing that is not listed here will cause client
            validation to error.
          items:
            $ref: '#/components/schemas/Error'
          type: array
        historical_balance_lookup:
          description: Any Rosetta implementation that supports querying the balance
            of an account at any height in the past should set this to true.
          type: boolean
      required:
      - errors
      - historical_balance_lookup
      - operation_statuses
      - operation_types
      type: object
    OperationStatus:
      description: OperationStatus is utilized to indicate which Operation status
        are considered successful.
      example:
        status: SUCCESS
        successful: true
      properties:
        status:
          description: The status is the network-specific status of the operation.
          type: string
        successful:
          description: An Operation is considered successful if the Operation.Amount
            should affect the Operation.Account. Some blockchains (like Bitcoin) only
            include successful operations in blocks but other blockchains (like Ethereum)
            include unsuccessful operations that incur a fee. To reconcile the computed
            balance from the stream of Operations, it is critical to understand which
            Operation.Status indicate an Operation is successful and should affect
            an Account.
          type: boolean
      required:
      - status
      - successful
      type: object
    Timestamp:
      description: The timestamp of the block in milliseconds since the Unix Epoch.
        The timestamp is stored in milliseconds because some blockchains produce blocks
        more often than once a second.
      example: 1582833600000
      format: int64
      minimum: 0
      type: integer
    PublicKey:
      description: PublicKey contains a public key byte array for a particular CurveType
        encoded in hex. Note that there is no PrivateKey struct as this is NEVER the
        concern of an implementation.
      example:
        hex_bytes: hex_bytes
      properties:
        hex_bytes:
          description: Hex-encoded public key bytes in the format specified by the
            CurveType.
          type: string
        curve_type:
          $ref: '#/components/schemas/CurveType'
      required:
      - curve_type
      - hex_bytes
      type: object
    CurveType:
      description: 'CurveType is the type of cryptographic curve associated with a
        PublicKey.  * secp256k1: SEC compressed - `33 bytes` (https://secg.org/sec1-v2.pdf#subsubsection.2.3.3)
        * edwards25519: `y (255-bits) || x-sign-bit (1-bit)` - `32 bytes` (https://ed25519.cr.yp.to/ed25519-20110926.pdf)'
      enum:
      - secp256k1
      - edwards25519
      type: string
    SigningPayload:
      description: SigningPayload is signed by the client with the keypair associated
        with an address using the specified SignatureType. SignatureType can be optionally
        populated if there is a restriction on the signature scheme that can be used
        to sign the payload.
      example:
        address: address
        hex_bytes: hex_bytes
      properties:
        address:
          description: The network-specific address of the account that should sign
            the payload.
          type: string
        hex_bytes:
          type: string
        signature_type:
          $ref: '#/components/schemas/SignatureType'
      required:
      - address
      - hex_bytes
      type: object
    Signature:
      description: Signature contains the payload that was signed, the public keys
        of the keypairs used to produce the signature, the signature (encoded in hex),
        and the SignatureType. PublicKey is often times not known during construction
        of the signing payloads but may be needed to combine signatures properly.
      example:
        public_key:
          hex_bytes: hex_bytes
        signing_payload:
          address: address
          hex_bytes: hex_bytes
        hex_bytes: hex_bytes
      properties:
        signing_payload:
          $ref: '#/components/schemas/SigningPayload'
        public_key:
          $ref: '#/components/schemas/PublicKey'
        signature_type:
          $ref: '#/components/schemas/SignatureType'
        hex_bytes:
          type: string
      required:
      - hex_bytes
      - public_key
      - signature_type
      - signing_payload
      type: object
    SignatureType:
      description: 'SignatureType is the type of a cryptographic signature. * ecdsa:
        `r (32-bytes) || s (32-bytes)` - `64 bytes` * ecdsa_recovery: `r (32-bytes)
        || s (32-bytes) || v (1-byte)` - `65 bytes` * ed25519: `R (32-byte) || s (32-bytes)`
        - `64 bytes`'
      enum:
      - ecdsa
      - ecdsa_recovery
      - ed25519
      type: string
    CoinAction:
      description: CoinActions are different state changes that a Coin can undergo.
        When a Coin is created, it is coin_created. When a Coin is spent, it is coin_spent.
        It is assumed that a single Coin cannot be created or spent more than once.
      enum:
      - coin_created
      - coin_spent
      type: string
    CoinIdentifier:
      description: CoinIdentifier uniquely identifies a Coin.
      example:
        identifier: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f:1
      properties:
        identifier:
          description: Identifier should be populated with a globally unique identifier
            of a Coin. In Bitcoin, this identifier would be transaction_hash:index.
          example: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f:1
          type: string
      required:
      - identifier
      type: object
    CoinChange:
      description: CoinChange is used to represent a change in state of a some coin
        identified by a coin_identifier. This object is part of the Operation model
        and must be populated for UTXO-based blockchains. Coincidentally, this abstraction
        of UTXOs allows for supporting both account-based transfers and UTXO-based
        transfers on the same blockchain (when a transfer is account-based, don't
        populate this model).
      example:
        coin_identifier:
          identifier: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f:1
      properties:
        coin_identifier:
          $ref: '#/components/schemas/CoinIdentifier'
        coin_action:
          $ref: '#/components/schemas/CoinAction'
      required:
      - coin_action
      - coin_identifier
      type: object
    Coin:
      description: Coin contains its unique identifier and the amount it represents.
      example:
        amount:
          metadata: '{}'
          currency:
            symbol: BTC
            metadata:
              Issuer: Satoshi
            decimals: 8
          value: "1238089899992"
        coin_identifier:
          identifier: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f:1
      properties:
        coin_identifier:
          $ref: '#/components/schemas/CoinIdentifier'
        amount:
          $ref: '#/components/schemas/Amount'
      required:
      - amount
      - coin_identifier
      type: object
    AccountBalanceRequest:
      description: An AccountBalanceRequest is utilized to make a balance request
        on the /account/balance endpoint. If the block_identifier is populated, a
        historical balance query should be performed.
      example:
        account_identifier:
          metadata: '{}'
          address: 0x3a065000ab4183c6bf581dc1e55a605455fc6d61
          sub_account:
            metadata: '{}'
            address: 0x6b175474e89094c44da98b954eedeac495271d0f
        network_identifier:
          blockchain: bitcoin
          sub_network_identifier:
            metadata:
              producer: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5
            network: shard 1
          network: mainnet
        block_identifier:
          index: 1123941
          hash: 0x1f2cc6c5027d2f201a5453ad1119574d2aed23a392654742ac3c78783c071f85
      properties:
        network_identifier:
          $ref: '#/components/schemas/NetworkIdentifier'
        account_identifier:
          $ref: '#/components/schemas/AccountIdentifier'
        block_identifier:
          $ref: '#/components/schemas/PartialBlockIdentifier'
      required:
      - account_identifier
      - network_identifier
      type: object
    AccountBalanceResponse:
      description: 'An AccountBalanceResponse is returned on the /account/balance
        endpoint. If an account has a balance for each AccountIdentifier describing
        it (ex: an ERC-20 token balance on a few smart contracts), an account balance
        request must be made with each AccountIdentifier.'
      example:
        balances:
        - metadata: '{}'
          currency:
            symbol: BTC
            metadata:
              Issuer: Satoshi
            decimals: 8
          value: "1238089899992"
        - metadata: '{}'
          currency:
            symbol: BTC
            metadata:
              Issuer: Satoshi
            decimals: 8
          value: "1238089899992"
        metadata:
          sequence_number: 23
        coins:
        - amount:
            metadata: '{}'
            currency:
              symbol: BTC
              metadata:
                Issuer: Satoshi
              decimals: 8
            value: "1238089899992"
          coin_identifier:
            identifier: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f:1
        - amount:
            metadata: '{}'
            currency:
              symbol: BTC
              metadata:
                Issuer: Satoshi
              decimals: 8
            value: "1238089899992"
          coin_identifier:
            identifier: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f:1
        block_identifier:
          index: 1123941
          hash: 0x1f2cc6c5027d2f201a5453ad1119574d2aed23a392654742ac3c78783c071f85
      properties:
        block_identifier:
          $ref: '#/components/schemas/BlockIdentifier'
        balances:
          description: A single account may have a balance in multiple currencies.
          items:
            $ref: '#/components/schemas/Amount'
          type: array
        coins:
          description: If a blockchain is UTXO-based, all unspent Coins owned by an
            account_identifier should be returned alongside the balance. It is highly
            recommended to populate this field so that users of the Rosetta API implementation
            don't need to maintain their own indexer to track their UTXOs.
          items:
            $ref: '#/components/schemas/Coin'
          type: array
        metadata:
          description: Account-based blockchains that utilize a nonce or sequence
            number should include that number in the metadata. This number could be
            unique to the identifier or global across the account address.
          example:
            sequence_number: 23
          type: object
      required:
      - balances
      - block_identifier
      type: object
    BlockRequest:
      description: A BlockRequest is utilized to make a block request on the /block
        endpoint.
      example:
        network_identifier:
          blockchain: bitcoin
          sub_network_identifier:
            metadata:
              producer: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5
            network: shard 1
          network: mainnet
        block_identifier:
          index: 1123941
          hash: 0x1f2cc6c5027d2f201a5453ad1119574d2aed23a392654742ac3c78783c071f85
      properties:
        network_identifier:
          $ref: '#/components/schemas/NetworkIdentifier'
        block_identifier:
          $ref: '#/components/schemas/PartialBlockIdentifier'
      required:
      - block_identifier
      - network_identifier
      type: object
    BlockResponse:
      description: A BlockResponse includes a fully-populated block or a partially-populated
        block with a list of other transactions to fetch (other_transactions).
      example:
        block:
          metadata:
            transactions_root: 0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347
            difficulty: "123891724987128947"
          parent_block_identifier:
            index: 1123941
            hash: 0x1f2cc6c5027d2f201a5453ad1119574d2aed23a392654742ac3c78783c071f85
          transactions:
          - metadata:
              size: 12378
              lockTime: 1582272577
            operations:
            - amount:
                metadata: '{}'
                currency:
                  symbol: BTC
                  metadata:
                    Issuer: Satoshi
                  decimals: 8
                value: "1238089899992"
              metadata:
                asm: 304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd01
                  03301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
                hex: 48304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd012103301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
              related_operations:
              - index: 0
                operation_identifier:
                  index: 0
              type: Transfer
              coin_change:
                coin_identifier:
                  identifier: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f:1
              account:
                metadata: '{}'
                address: 0x3a065000ab4183c6bf581dc1e55a605455fc6d61
                sub_account:
                  metadata: '{}'
                  address: 0x6b175474e89094c44da98b954eedeac495271d0f
              operation_identifier:
                index: 1
                network_index: 0
              status: Reverted
            - amount:
                metadata: '{}'
                currency:
                  symbol: BTC
                  metadata:
                    Issuer: Satoshi
                  decimals: 8
                value: "1238089899992"
              metadata:
                asm: 304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd01
                  03301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
                hex: 48304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd012103301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
              related_operations:
              - index: 0
                operation_identifier:
                  index: 0
              type: Transfer
              coin_change:
                coin_identifier:
                  identifier: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f:1
              account:
                metadata: '{}'
                address: 0x3a065000ab4183c6bf581dc1e55a605455fc6d61
                sub_account:
                  metadata: '{}'
                  address: 0x6b175474e89094c44da98b954eedeac495271d0f
              operation_identifier:
                index: 1
                network_index: 0
              status: Reverted
            transaction_identifier:
              hash: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f
          - metadata:
              size: 12378
              lockTime: 1582272577
            operations:
            - amount:
                metadata: '{}'
                currency:
                  symbol: BTC
                  metadata:
                    Issuer: Satoshi
                  decimals: 8
                value: "1238089899992"
              metadata:
                asm: 304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd01
                  03301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
                hex: 48304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd012103301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
              related_operations:
              - index: 0
                operation_identifier:
                  index: 0
              type: Transfer
              coin_change:
                coin_identifier:
                  identifier: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f:1
              account:
                metadata: '{}'
                address: 0x3a065000ab4183c6bf581dc1e55a605455fc6d61
                sub_account:
                  metadata: '{}'
                  address: 0x6b175474e89094c44da98b954eedeac495271d0f
              operation_identifier:
                index: 1
                network_index: 0
              status: Reverted
            - amount:
                metadata: '{}'
                currency:
                  symbol: BTC
                  metadata:
                    Issuer: Satoshi
                  decimals: 8
                value: "1238089899992"
              metadata:
                asm: 304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd01
                  03301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
                hex: 48304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd012103301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
              related_operations:
              - index: 0
                operation_identifier:
                  index: 0
              type: Transfer
              coin_change:
                coin_identifier:
                  identifier: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f:1
              account:
                metadata: '{}'
                address: 0x3a065000ab4183c6bf581dc1e55a605455fc6d61
                sub_account:
                  metadata: '{}'
                  address: 0x6b175474e89094c44da98b954eedeac495271d0f
              operation_identifier:
                index: 1
                network_index: 0
              status: Reverted
            transaction_identifier:
              hash: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f
          block_identifier:
            index: 1123941
            hash: 0x1f2cc6c5027d2f201a5453ad1119574d2aed23a392654742ac3c78783c071f85
          timestamp: 1582833600000
        other_transactions:
        - hash: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f
        - hash: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f
      properties:
        block:
          $ref: '#/components/schemas/Block'
        other_transactions:
          description: 'Some blockchains may require additional transactions to be
            fetched that weren''t returned in the block response (ex: block only returns
            transaction hashes). For blockchains with a lot of transactions in each
            block, this can be very useful as consumers can concurrently fetch all
            transactions returned.'
          items:
            $ref: '#/components/schemas/TransactionIdentifier'
          type: array
      required:
      - block
      type: object
    BlockTransactionRequest:
      description: A BlockTransactionRequest is used to fetch a Transaction included
        in a block that is not returned in a BlockResponse.
      example:
        transaction_identifier:
          hash: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f
        network_identifier:
          blockchain: bitcoin
          sub_network_identifier:
            metadata:
              producer: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5
            network: shard 1
          network: mainnet
        block_identifier:
          index: 1123941
          hash: 0x1f2cc6c5027d2f201a5453ad1119574d2aed23a392654742ac3c78783c071f85
      properties:
        network_identifier:
          $ref: '#/components/schemas/NetworkIdentifier'
        block_identifier:
          $ref: '#/components/schemas/BlockIdentifier'
        transaction_identifier:
          $ref: '#/components/schemas/TransactionIdentifier'
      required:
      - block_identifier
      - network_identifier
      - transaction_identifier
      type: object
    BlockTransactionResponse:
      description: A BlockTransactionResponse contains information about a block transaction.
      example:
        transaction:
          metadata:
            size: 12378
            lockTime: 1582272577
          operations:
          - amount:
              metadata: '{}'
              currency:
                symbol: BTC
                metadata:
                  Issuer: Satoshi
                decimals: 8
              value: "1238089899992"
            metadata:
              asm: 304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd01
                03301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
              hex: 48304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd012103301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
            related_operations:
            - index: 0
              operation_identifier:
                index: 0
            type: Transfer
            coin_change:
              coin_identifier:
                identifier: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f:1
            account:
              metadata: '{}'
              address: 0x3a065000ab4183c6bf581dc1e55a605455fc6d61
              sub_account:
                metadata: '{}'
                address: 0x6b175474e89094c44da98b954eedeac495271d0f
            operation_identifier:
              index: 1
              network_index: 0
            status: Reverted
          - amount:
              metadata: '{}'
              currency:
                symbol: BTC
                metadata:
                  Issuer: Satoshi
                decimals: 8
              value: "1238089899992"
            metadata:
              asm: 304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd01
                03301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
              hex: 48304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd012103301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
            related_operations:
            - index: 0
              operation_identifier:
                index: 0
            type: Transfer
            coin_change:
              coin_identifier:
                identifier: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f:1
            account:
              metadata: '{}'
              address: 0x3a065000ab4183c6bf581dc1e55a605455fc6d61
              sub_account:
                metadata: '{}'
                address: 0x6b175474e89094c44da98b954eedeac495271d0f
            operation_identifier:
              index: 1
              network_index: 0
            status: Reverted
          transaction_identifier:
            hash: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f
      properties:
        transaction:
          $ref: '#/components/schemas/Transaction'
      required:
      - transaction
      type: object
    MempoolResponse:
      description: A MempoolResponse contains all transaction identifiers in the mempool
        for a particular network_identifier.
      example:
        transaction_identifiers:
        - hash: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f
        - hash: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f
      properties:
        transaction_identifiers:
          items:
            $ref: '#/components/schemas/TransactionIdentifier'
          type: array
      required:
      - transaction_identifiers
      type: object
    MempoolTransactionRequest:
      description: A MempoolTransactionRequest is utilized to retrieve a transaction
        from the mempool.
      example:
        transaction_identifier:
          hash: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f
        network_identifier:
          blockchain: bitcoin
          sub_network_identifier:
            metadata:
              producer: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5
            network: shard 1
          network: mainnet
      properties:
        network_identifier:
          $ref: '#/components/schemas/NetworkIdentifier'
        transaction_identifier:
          $ref: '#/components/schemas/TransactionIdentifier'
      required:
      - network_identifier
      - transaction_identifier
      type: object
    MempoolTransactionResponse:
      description: 'A MempoolTransactionResponse contains an estimate of a mempool
        transaction. It may not be possible to know the full impact of a transaction
        in the mempool (ex: fee paid).'
      example:
        metadata:
          descendant_fees: 123923
          ancestor_count: 2
        transaction:
          metadata:
            size: 12378
            lockTime: 1582272577
          operations:
          - amount:
              metadata: '{}'
              currency:
                symbol: BTC
                metadata:
                  Issuer: Satoshi
                decimals: 8
              value: "1238089899992"
            metadata:
              asm: 304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd01
                03301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
              hex: 48304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd012103301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
            related_operations:
            - index: 0
              operation_identifier:
                index: 0
            type: Transfer
            coin_change:
              coin_identifier:
                identifier: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f:1
            account:
              metadata: '{}'
              address: 0x3a065000ab4183c6bf581dc1e55a605455fc6d61
              sub_account:
                metadata: '{}'
                address: 0x6b175474e89094c44da98b954eedeac495271d0f
            operation_identifier:
              index: 1
              network_index: 0
            status: Reverted
          - amount:
              metadata: '{}'
              currency:
                symbol: BTC
                metadata:
                  Issuer: Satoshi
                decimals: 8
              value: "1238089899992"
            metadata:
              asm: 304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd01
                03301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
              hex: 48304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd012103301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
            related_operations:
            - index: 0
              operation_identifier:
                index: 0
            type: Transfer
            coin_change:
              coin_identifier:
                identifier: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f:1
            account:
              metadata: '{}'
              address: 0x3a065000ab4183c6bf581dc1e55a605455fc6d61
              sub_account:
                metadata: '{}'
                address: 0x6b175474e89094c44da98b954eedeac495271d0f
            operation_identifier:
              index: 1
              network_index: 0
            status: Reverted
          transaction_identifier:
            hash: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f
      properties:
        transaction:
          $ref: '#/components/schemas/Transaction'
        metadata:
          example:
            descendant_fees: 123923
            ancestor_count: 2
          type: object
      required:
      - transaction
      type: object
    MetadataRequest:
      description: A MetadataRequest is utilized in any request where the only argument
        is optional metadata.
      example:
        metadata: '{}'
      properties:
        metadata:
          type: object
      type: object
    NetworkListResponse:
      description: A NetworkListResponse contains all NetworkIdentifiers that the
        node can serve information for.
      example:
        network_identifiers:
        - blockchain: bitcoin
          sub_network_identifier:
            metadata:
              producer: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5
            network: shard 1
          network: mainnet
        - blockchain: bitcoin
          sub_network_identifier:
            metadata:
              producer: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5
            network: shard 1
          network: mainnet
      properties:
        network_identifiers:
          items:
            $ref: '#/components/schemas/NetworkIdentifier'
          type: array
      required:
      - network_identifiers
      type: object
    NetworkRequest:
      description: A NetworkRequest is utilized to retrieve some data specific exclusively
        to a NetworkIdentifier.
      example:
        metadata: '{}'
        network_identifier:
          blockchain: bitcoin
          sub_network_identifier:
            metadata:
              producer: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5
            network: shard 1
          network: mainnet
      properties:
        network_identifier:
          $ref: '#/components/schemas/NetworkIdentifier'
        metadata:
          type: object
      required:
      - network_identifier
      type: object
    NetworkStatusResponse:
      description: NetworkStatusResponse contains basic information about the node's
        view of a blockchain network. It is assumed that any BlockIdentifier.Index
        less than or equal to CurrentBlockIdentifier.Index can be queried. If a Rosetta
        implementation prunes historical state, it should populate the optional `oldest_block_identifier`
        field with the oldest block available to query. If this is not populated,
        it is assumed that the `genesis_block_identifier` is the oldest queryable
        block. If a Rosetta implementation performs some pre-sync before it is possible
        to query blocks, sync_status should be populated so that clients can still
        monitor healthiness. Without this field, it may appear that the implementation
        is stuck syncing and needs to be terminated.
      example:
        oldest_block_identifier:
          index: 1123941
          hash: 0x1f2cc6c5027d2f201a5453ad1119574d2aed23a392654742ac3c78783c071f85
        current_block_identifier:
          index: 1123941
          hash: 0x1f2cc6c5027d2f201a5453ad1119574d2aed23a392654742ac3c78783c071f85
        peers:
        - metadata: '{}'
          peer_id: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5
        - metadata: '{}'
          peer_id: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5
        sync_status:
          target_index: 150
          stage: header sync
          current_index: 100
        current_block_timestamp: 1582833600000
        genesis_block_identifier:
          index: 1123941
          hash: 0x1f2cc6c5027d2f201a5453ad1119574d2aed23a392654742ac3c78783c071f85
      properties:
        current_block_identifier:
          $ref: '#/components/schemas/BlockIdentifier'
        current_block_timestamp:
          $ref: '#/components/schemas/Timestamp'
        genesis_block_identifier:
          $ref: '#/components/schemas/BlockIdentifier'
        oldest_block_identifier:
          $ref: '#/components/schemas/BlockIdentifier'
        sync_status:
          $ref: '#/components/schemas/SyncStatus'
        peers:
          items:
            $ref: '#/components/schemas/Peer'
          type: array
      required:
      - current_block_identifier
      - current_block_timestamp
      - genesis_block_identifier
      - peers
      type: object
    NetworkOptionsResponse:
      description: NetworkOptionsResponse contains information about the versioning
        of the node and the allowed operation statuses, operation types, and errors.
      example:
        allow:
          operation_types:
          - TRANSFER
          - TRANSFER
          historical_balance_lookup: true
          operation_statuses:
          - status: SUCCESS
            successful: true
          - status: SUCCESS
            successful: true
          errors:
          - retriable: true
            code: 12
            details:
              address: 0x1dcc4de8dec75d7aab85b567b6
              error: not base64
            message: Invalid account format
          - retriable: true
            code: 12
            details:
              address: 0x1dcc4de8dec75d7aab85b567b6
              error: not base64
            message: Invalid account format
        version:
          metadata: '{}'
          rosetta_version: 1.2.5
          node_version: 1.0.2
          middleware_version: 0.2.7
      properties:
        version:
          $ref: '#/components/schemas/Version'
        allow:
          $ref: '#/components/schemas/Allow'
      required:
      - allow
      - version
      type: object
    ConstructionMetadataRequest:
      description: A ConstructionMetadataRequest is utilized to get information required
        to construct a transaction. The Options object used to specify which metadata
        to return is left purposely unstructured to allow flexibility for implementers.
      example:
        options: '{}'
        network_identifier:
          blockchain: bitcoin
          sub_network_identifier:
            metadata:
              producer: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5
            network: shard 1
          network: mainnet
      properties:
        network_identifier:
          $ref: '#/components/schemas/NetworkIdentifier'
        options:
          description: 'Some blockchains require different metadata for different
            types of transaction construction (ex: delegation versus a transfer).
            Instead of requiring a blockchain node to return all possible types of
            metadata for construction (which may require multiple node fetches), the
            client can populate an options object to limit the metadata returned to
            only the subset required.'
          type: object
      required:
      - network_identifier
      - options
      type: object
    ConstructionMetadataResponse:
      description: The ConstructionMetadataResponse returns network-specific metadata
        used for transaction construction.
      example:
        metadata:
          account_sequence: 23
          recent_block_hash: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5
      properties:
        metadata:
          example:
            account_sequence: 23
            recent_block_hash: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5
          type: object
      required:
      - metadata
      type: object
    ConstructionDeriveRequest:
      description: ConstructionDeriveRequest is passed to the `/construction/derive`
        endpoint. Network is provided in the request because some blockchains have
        different address formats for different networks. Metadata is provided in
        the request because some blockchains allow for multiple address types (i.e.
        different address for validators vs normal accounts).
      example:
        public_key:
          hex_bytes: hex_bytes
        metadata: '{}'
        network_identifier:
          blockchain: bitcoin
          sub_network_identifier:
            metadata:
              producer: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5
            network: shard 1
          network: mainnet
      properties:
        network_identifier:
          $ref: '#/components/schemas/NetworkIdentifier'
        public_key:
          $ref: '#/components/schemas/PublicKey'
        metadata:
          type: object
      required:
      - network_identifier
      - public_key
      type: object
    ConstructionDeriveResponse:
      description: ConstructionDeriveResponse is returned by the `/construction/derive`
        endpoint.
      example:
        metadata: '{}'
        address: address
      properties:
        address:
          description: Address in network-specific format.
          type: string
        metadata:
          type: object
      required:
      - address
      type: object
    ConstructionPreprocessRequest:
      description: ConstructionPreprocessRequest is passed to the `/construction/preprocess`
        endpoint so that a Rosetta implementation can determine which metadata it
        needs to request for construction.
      example:
        metadata: '{}'
        operations:
        - amount:
            metadata: '{}'
            currency:
              symbol: BTC
              metadata:
                Issuer: Satoshi
              decimals: 8
            value: "1238089899992"
          metadata:
            asm: 304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd01
              03301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
            hex: 48304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd012103301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
          related_operations:
          - index: 0
            operation_identifier:
              index: 0
          type: Transfer
          coin_change:
            coin_identifier:
              identifier: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f:1
          account:
            metadata: '{}'
            address: 0x3a065000ab4183c6bf581dc1e55a605455fc6d61
            sub_account:
              metadata: '{}'
              address: 0x6b175474e89094c44da98b954eedeac495271d0f
          operation_identifier:
            index: 1
            network_index: 0
          status: Reverted
        - amount:
            metadata: '{}'
            currency:
              symbol: BTC
              metadata:
                Issuer: Satoshi
              decimals: 8
            value: "1238089899992"
          metadata:
            asm: 304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd01
              03301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
            hex: 48304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd012103301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
          related_operations:
          - index: 0
            operation_identifier:
              index: 0
          type: Transfer
          coin_change:
            coin_identifier:
              identifier: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f:1
          account:
            metadata: '{}'
            address: 0x3a065000ab4183c6bf581dc1e55a605455fc6d61
            sub_account:
              metadata: '{}'
              address: 0x6b175474e89094c44da98b954eedeac495271d0f
          operation_identifier:
            index: 1
            network_index: 0
          status: Reverted
        network_identifier:
          blockchain: bitcoin
          sub_network_identifier:
            metadata:
              producer: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5
            network: shard 1
          network: mainnet
      properties:
        network_identifier:
          $ref: '#/components/schemas/NetworkIdentifier'
        operations:
          items:
            $ref: '#/components/schemas/Operation'
          type: array
        metadata:
          type: object
      required:
      - network_identifier
      - operations
      type: object
    ConstructionPreprocessResponse:
      description: ConstructionPreprocessResponse contains the request that will be
        sent directly to `/construction/metadata`. If it is not necessary to make
        a request to `/construction/metadata`, options should be null.
      example:
        options: '{}'
      properties:
        options:
          description: The options that will be sent directly to `/construction/metadata`
            by the caller.
          type: object
      type: object
    ConstructionPayloadsRequest:
      description: ConstructionPayloadsRequest is the request to `/construction/payloads`.
        It contains the network, a slice of operations, and arbitrary metadata that
        was returned by the call to `/construction/metadata`.
      example:
        metadata: '{}'
        operations:
        - amount:
            metadata: '{}'
            currency:
              symbol: BTC
              metadata:
                Issuer: Satoshi
              decimals: 8
            value: "1238089899992"
          metadata:
            asm: 304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd01
              03301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
            hex: 48304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd012103301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
          related_operations:
          - index: 0
            operation_identifier:
              index: 0
          type: Transfer
          coin_change:
            coin_identifier:
              identifier: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f:1
          account:
            metadata: '{}'
            address: 0x3a065000ab4183c6bf581dc1e55a605455fc6d61
            sub_account:
              metadata: '{}'
              address: 0x6b175474e89094c44da98b954eedeac495271d0f
          operation_identifier:
            index: 1
            network_index: 0
          status: Reverted
        - amount:
            metadata: '{}'
            currency:
              symbol: BTC
              metadata:
                Issuer: Satoshi
              decimals: 8
            value: "1238089899992"
          metadata:
            asm: 304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd01
              03301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
            hex: 48304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd012103301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
          related_operations:
          - index: 0
            operation_identifier:
              index: 0
          type: Transfer
          coin_change:
            coin_identifier:
              identifier: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f:1
          account:
            metadata: '{}'
            address: 0x3a065000ab4183c6bf581dc1e55a605455fc6d61
            sub_account:
              metadata: '{}'
              address: 0x6b175474e89094c44da98b954eedeac495271d0f
          operation_identifier:
            index: 1
            network_index: 0
          status: Reverted
        network_identifier:
          blockchain: bitcoin
          sub_network_identifier:
            metadata:
              producer: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5
            network: shard 1
          network: mainnet
      properties:
        network_identifier:
          $ref: '#/components/schemas/NetworkIdentifier'
        operations:
          items:
            $ref: '#/components/schemas/Operation'
          type: array
        metadata:
          type: object
      required:
      - network_identifier
      - operations
      type: object
    ConstructionPayloadsResponse:
      description: ConstructionTransactionResponse is returned by `/construction/payloads`.
        It contains an unsigned transaction blob (that is usually needed to construct
        the a network transaction from a collection of signatures) and an array of
        payloads that must be signed by the caller.
      example:
        unsigned_transaction: unsigned_transaction
        payloads:
        - address: address
          hex_bytes: hex_bytes
        - address: address
          hex_bytes: hex_bytes
      properties:
        unsigned_transaction:
          type: string
        payloads:
          items:
            $ref: '#/components/schemas/SigningPayload'
          type: array
      required:
      - payloads
      - unsigned_transaction
      type: object
    ConstructionCombineRequest:
      description: ConstructionCombineRequest is the input to the `/construction/combine`
        endpoint. It contains the unsigned transaction blob returned by `/construction/payloads`
        and all required signatures to create a network transaction.
      example:
        unsigned_transaction: unsigned_transaction
        signatures:
        - public_key:
            hex_bytes: hex_bytes
          signing_payload:
            address: address
            hex_bytes: hex_bytes
          hex_bytes: hex_bytes
        - public_key:
            hex_bytes: hex_bytes
          signing_payload:
            address: address
            hex_bytes: hex_bytes
          hex_bytes: hex_bytes
        network_identifier:
          blockchain: bitcoin
          sub_network_identifier:
            metadata:
              producer: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5
            network: shard 1
          network: mainnet
      properties:
        network_identifier:
          $ref: '#/components/schemas/NetworkIdentifier'
        unsigned_transaction:
          type: string
        signatures:
          items:
            $ref: '#/components/schemas/Signature'
          type: array
      required:
      - network_identifier
      - signatures
      - unsigned_transaction
      type: object
    ConstructionCombineResponse:
      description: ConstructionCombineResponse is returned by `/construction/combine`.
        The network payload will be sent directly to the `construction/submit` endpoint.
      example:
        signed_transaction: signed_transaction
      properties:
        signed_transaction:
          type: string
      required:
      - signed_transaction
      type: object
    ConstructionParseRequest:
      description: ConstructionParseRequest is the input to the `/construction/parse`
        endpoint. It allows the caller to parse either an unsigned or signed transaction.
      example:
        signed: true
        transaction: transaction
        network_identifier:
          blockchain: bitcoin
          sub_network_identifier:
            metadata:
              producer: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5
            network: shard 1
          network: mainnet
      properties:
        network_identifier:
          $ref: '#/components/schemas/NetworkIdentifier'
        signed:
          description: Signed is a boolean indicating whether the transaction is signed.
          type: boolean
        transaction:
          description: This must be either the unsigned transaction blob returned
            by `/construction/payloads` or the signed transaction blob returned by
            `/construction/combine`.
          type: string
      required:
      - network_identifier
      - signed
      - transaction
      type: object
    ConstructionParseResponse:
      description: ConstructionParseResponse contains an array of operations that
        occur in a transaction blob. This should match the array of operations provided
        to `/construction/preprocess` and `/construction/payloads`.
      example:
        signers:
        - signers
        - signers
        metadata: '{}'
        operations:
        - amount:
            metadata: '{}'
            currency:
              symbol: BTC
              metadata:
                Issuer: Satoshi
              decimals: 8
            value: "1238089899992"
          metadata:
            asm: 304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd01
              03301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
            hex: 48304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd012103301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
          related_operations:
          - index: 0
            operation_identifier:
              index: 0
          type: Transfer
          coin_change:
            coin_identifier:
              identifier: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f:1
          account:
            metadata: '{}'
            address: 0x3a065000ab4183c6bf581dc1e55a605455fc6d61
            sub_account:
              metadata: '{}'
              address: 0x6b175474e89094c44da98b954eedeac495271d0f
          operation_identifier:
            index: 1
            network_index: 0
          status: Reverted
        - amount:
            metadata: '{}'
            currency:
              symbol: BTC
              metadata:
                Issuer: Satoshi
              decimals: 8
            value: "1238089899992"
          metadata:
            asm: 304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd01
              03301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
            hex: 48304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd012103301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2
          related_operations:
          - index: 0
            operation_identifier:
              index: 0
          type: Transfer
          coin_change:
            coin_identifier:
              identifier: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f:1
          account:
            metadata: '{}'
            address: 0x3a065000ab4183c6bf581dc1e55a605455fc6d61
            sub_account:
              metadata: '{}'
              address: 0x6b175474e89094c44da98b954eedeac495271d0f
          operation_identifier:
            index: 1
            network_index: 0
          status: Reverted
      properties:
        operations:
          items:
            $ref: '#/components/schemas/Operation'
          type: array
        signers:
          description: All signers of a particular transaction. If the transaction
            is unsigned, it should be empty.
          items:
            type: string
          type: array
        metadata:
          type: object
      required:
      - operations
      - signers
      type: object
    ConstructionHashRequest:
      description: ConstructionHashRequest is the input to the `/construction/hash`
        endpoint.
      example:
        signed_transaction: signed_transaction
        network_identifier:
          blockchain: bitcoin
          sub_network_identifier:
            metadata:
              producer: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5
            network: shard 1
          network: mainnet
      properties:
        network_identifier:
          $ref: '#/components/schemas/NetworkIdentifier'
        signed_transaction:
          type: string
      required:
      - network_identifier
      - signed_transaction
      type: object
    ConstructionSubmitRequest:
      description: The transaction submission request includes a signed transaction.
      example:
        signed_transaction: signed_transaction
        network_identifier:
          blockchain: bitcoin
          sub_network_identifier:
            metadata:
              producer: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5
            network: shard 1
          network: mainnet
      properties:
        network_identifier:
          $ref: '#/components/schemas/NetworkIdentifier'
        signed_transaction:
          type: string
      required:
      - network_identifier
      - signed_transaction
      type: object
    TransactionIdentifierResponse:
      description: TransactionIdentifierResponse contains the transaction_identifier
        of a transaction that was submitted to either `/construction/hash` or `/construction/submit`.
      example:
        metadata: '{}'
        transaction_identifier:
          hash: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f
      properties:
        transaction_identifier:
          $ref: '#/components/schemas/TransactionIdentifier'
        metadata:
          type: object
      required:
      - transaction_identifier
      type: object
    Error:
      description: Instead of utilizing HTTP status codes to describe node errors
        (which often do not have a good analog), rich errors are returned using this
        object. Both the code and message fields can be individually used to correctly
        identify an error. Implementations MUST use unique values for both fields.
      example:
        retriable: true
        code: 12
        details:
          address: 0x1dcc4de8dec75d7aab85b567b6
          error: not base64
        message: Invalid account format
      properties:
        code:
          description: Code is a network-specific error code. If desired, this code
            can be equivalent to an HTTP status code.
          example: 12
          format: int32
          minimum: 0
          type: integer
        message:
          description: Message is a network-specific error message. The message MUST
            NOT change for a given code. In particular, this means that any contextual
            information should be included in the details field.
          example: Invalid account format
          type: string
        retriable:
          description: An error is retriable if the same request may succeed if submitted
            again.
          type: boolean
        details:
          description: Often times it is useful to return context specific to the
            request that caused the error (i.e. a sample of the stack trace or impacted
            account) in addition to the standard error message.
          example:
            address: 0x1dcc4de8dec75d7aab85b567b6
            error: not base64
          type: object
      required:
      - code
      - message
      - retriable
      type: object
